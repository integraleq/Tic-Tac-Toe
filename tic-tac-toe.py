#!/usr/bin/env python2.6
"""
    Tic Tac Toe - This is a console driven tic-tac-toe app. Nobody can beat the cpu in this one!
"""

import pdb
import os
import pprint
import re

#we want to hold all of the information about the environment of the tic tac toe game in the 
#game config dictionary for quick lookups and also to add a nice closure for all of the state management
game_config = {}
#the player shape key holds the 'x' or 'o' shape that was selected by the player
game_config.update({'player_shape':None})
#the cpu shape is selected after the player selects their shape
game_config.update({'cpu_shape':None})
#the game board is a 3x3 array constructed from dict of dicts. this lets us simulate the tic tac toe board 
#with a great deal of flexibility
game_config.update({'game_board':None})
#the player choices a coin side to use in the coin toss
game_config.update({'player_chosen_coin_side':None})
#the generic player who has the first move in the current game
game_config.update({'first_move':None})
#the current move maker (player-1 or cpu)
game_config.update({'current_move_maker':None})
#the side of the coin which was right-side up after the simulated coin toss
game_config.update({'coin_side':None})
#boolean flag game_over is toggled once a game is done
#games are ended when there is an actual winner or when 
#an oppoenet or current move maker
#concedes defeat by quitting
game_config.update({'game_over':False})
#first printing flag will be used for the first loop of the game
game_config.update({'first_printing':True})

#side translator is a convenience container that gives the full name of the
#selected coin side
side_translator = {}
side_translator.update({'h':'Heads'})
side_translator.update({'t':'Tails'})

#the expected shapes that can be chosen are only 'x' and 'o' for now. if more exotic shapes are desired, simply
#extend the expected list and have fun with the madness
expected_shape_choices = ['x','o']

#the expected sides that can be chosen are only 'h' and 't' for now.
expected_coin_side_choices = ['h','t']


def build_board():
    """
        Build Board: Constructs our virtual game board.
    """
    game_config.update({'game_board':dict([(key,dict([(key,None) for key in range(1,4)])) for key in range(1,4)])})

def perform_shape_selection():
    """
        Perform Shape Selection: Asks the player for the shape to use in the game. 
    """
    os.system('clear')
    game_config.update({'player_shape':raw_input("Enter the shape that the player will be : '(x or o)': ")})

def perform_coin_side_selection():
    """
        Perform Coin Side Selection: Asks the player for the coin side that they will choice for the coin toss.
    """
    os.system('clear')
    game_config.update({'player_chosen_coin_side':raw_input("Choose your side '(H or T)'. This determines who makes the first move. : ")})

def select_cpu_shape():
    """
        Select CPU Shape: Selects the opposing shape for the cpu.
    """
    if game_config['player_shape'] == 'x':
       game_config.update({'cpu_shape':'o'})
    else:
       game_config.update({'cpu_shape':'x'})
    return game_config['cpu_shape']

def display_setup():
    """
       Display Setup: Performs the setup of the board, player and cpu states.
    """
    print "#### Welcome!!!!!"
    print "####"
    print "####"
    print "The rules are simple... But can you beat the cpu??"
    perform_shape_selection()
    if game_config['player_shape'].strip().lower() not in expected_shape_choices:
        while game_config['player_shape'] not in expected_shape_choices:
            print "Come now... Invalid choice selected... Please try again."
            os.system("sleep 2")
            perform_shape_selection()
    print "Player 1 will play as:"+game_config['player_shape'].strip().upper()+"."
    print "CPU      will play as:"+select_cpu_shape().strip().upper()+"."
    os.system('sleep 2')
    print "#### Initializing game board...."

def decide_who_goes_first():
    """
        Decide Who Goes First: Simple selector which will set the first_move
        key in the game_config to the player or the cpu, depending on who won
        the coin toss
    """
    if game_config['player_chosen_coin_side'] == game_config['coin_side']:
        game_config.update({'first_move':'player-1'})
    else:
        game_config.update({'first_move':'cpu'})
    return game_config['first_move']

def flip_coin():
    """
        Flip Coin: Simulates a coin flip for the decision of who makes the first move on the board.
    """
    import random
    from random import Random
    rnd_coin = Random()
    rnd_coin.seed()
    print "#### Initializing coin...."
    internal_flips = [rnd_coin.choice(['h','t']) for i in range(1,1000)]
    perform_coin_side_selection()
    if game_config['player_chosen_coin_side'].strip().lower() not in expected_coin_side_choices:
        while game_config['player_chosen_coin_side'].strip() not in expected_coin_side_choices:
            print "Come now... Invalid choice selected... Please try again."
            os.system("sleep 2")
            perform_coin_side_selection()
    print "#### Flipping coin... Good Luck!"
    os.system('sleep 1')
    game_config.update({'coin_side':rnd_coin.choice(['h','t'])})
    print "#### It's :"+side_translator[game_config['coin_side']]+"!"
    os.system('sleep 2')
    print "#### So the player who will move first is:"+decide_who_goes_first()

def get_next_player_move():
    """
        Get Next Player Move: Get the next move that a player wants to make.
    """
    game_config.update({'player_next_move':raw_input("Enter the next place that you would like to place your shape (example [3-3] for the 3rd row and 3rd column), or enter [q] to concede defeat...")})

def make_next_move():
    """
        Make Next Move: Have the computer make its next calculated move.
    """
    pass

def decide_if_game_over():
    """
        Decide if game is over: Scans the board to see if a winner can be
        crowned and the game be declared over.
    """
    if game_config['current_move_maker'] == 'cpu':
        game_config.update({'current_move_maker':'player-1'})
    else:
        game_config.update({'current_move_maker':'cpu'})
    pass

def update_game_board():
    """
        Update Game Board: Place piece on board according to the most recent
        accepted move
    """
    pass

def accept_next_move():
    """
        Accept Next Move: Accepts the next move from the
                          person/cpu that is currently
                          the move maker
    """
    if game_config['current_move_maker'] == 'cpu':
        make_next_move()
    elif game_config['current_move_maker'] == 'player-1':
        get_next_player_move()
        if not re.search('\[\d-\d\]',game_config['player_next_move'].strip()):
            while ((not
            re.search('\[\d-\d\]',game_config['player_next_move'].strip())) and (not re.search('\[q\]',game_config['player_next_move'].strip()))):
                print "Come now... Invalid choice selected... Please try again."
                os.system("sleep 2")
                get_next_player_move()
        if re.search('\[q\]',game_config['player_next_move'].strip()):
            print "#### Ohhh! In a stunning upset, player-1 has just conceeded defeat!"
            game_config['game_over'] = True

def display_marquee():
    """
        Display Marquee: Displays the cheesy marquee that was constructed by primitive graphical means...
    """
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "######################################                                     #############################################################################################################################################################"
    print "######################################################    ##############################################################################################################################################################################"
    print "######################################################    #####################    #####################################################################################################################################################"
    print "######################################################    #####################    #####################################################################################################################################################"
    print "######################################################    ##############################################################################################################################################################################"
    print "######################################################    ##############################################################################################################################################################################"
    print "######################################################    #####################    ########         ####################################################################################################################################"
    print "######################################################    #####################    ########  ###########################################################################################################################################"
    print "######################################################    #####################    ########  ###########################################################################################################################################"
    print "######################################################    #####################    ########  ###########################################################################################################################################"
    print "######################################################    #####################    ########         ####################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "####################################################################################################################                               #####################################################################################"
    print "#################################################################################################################################    ###################################################################################################"
    print "#################################################################################################################################    ###################################################################################################"
    print "#################################################################################################################################    ###################################################################################################"
    print "#################################################################################################################################    ###################################################################################################"
    print "#################################################################################################################################    #################          #######         ########################################################"
    print "#################################################################################################################################    #################  ###############  ###############################################################"
    print "#################################################################################################################################    #################          #######  ###############################################################"
    print "#################################################################################################################################    #################  ######  #######  ###############################################################"
    print "#################################################################################################################################    #################          #######         ########################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "######################################                                     #############################################################################################################################################################"
    print "#####################################################     ##############################################################################################################################################################################"
    print "#####################################################     ##############################################################################################################################################################################"
    print "#####################################################     ##############################################################################################################################################################################"
    print "#####################################################     ####################             ########               ######################################################################################################################"
    print "#####################################################     ####################  #########  ########  ###################################################################################################################################"
    print "#####################################################     ####################  #########  ########  ###################################################################################################################################"
    print "#####################################################     ####################  #########  ########               ######################################################################################################################"
    print "#####################################################     ####################  #########  ########  ###################################################################################################################################"
    print "#####################################################     ####################  #########  ########  ###################################################################################################################################"
    print "#####################################################     ####################  #########  ########  ###################################################################################################################################"
    print "#####################################################     ####################             ########               ######################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"
    print "########################################################################################################################################################################################################################################"


if __name__ == "__main__":
    os.system('clear')
    display_marquee()
    os.system('sleep 2')
    os.system('clear')
    display_setup()
    build_board()
    flip_coin()
    game_config.update({'current_move_maker':game_config['first_move']})
    while not game_config['game_over']:
        if game_config['first_printing']:
            game_config['first_printing'] = False
            print "#### This should be a great game!"
        else:
            print "#### And the game goes on!!"
        print "#### "+game_config['current_move_maker']+" is about to make a move..."
        accept_next_move()
        if not game_config['game_over']:
            update_game_board()
            decide_if_game_over()
